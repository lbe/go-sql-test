//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var User = newUserTable("", "user", "")

type userTable struct {
	sqlite.Table

	// Columns
	User       sqlite.ColumnString
	City       sqlite.ColumnString
	Region     sqlite.ColumnString
	Country    sqlite.ColumnString
	AreaCode   sqlite.ColumnString
	ZipCode    sqlite.ColumnString
	YearBirth  sqlite.ColumnInteger
	Im         sqlite.ColumnString
	Name       sqlite.ColumnString
	CreatedTst sqlite.ColumnTimestamp
	ChangedTst sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		UserColumn       = sqlite.StringColumn("user")
		CityColumn       = sqlite.StringColumn("city")
		RegionColumn     = sqlite.StringColumn("region")
		CountryColumn    = sqlite.StringColumn("country")
		AreaCodeColumn   = sqlite.StringColumn("area_code")
		ZipCodeColumn    = sqlite.StringColumn("zip_code")
		YearBirthColumn  = sqlite.IntegerColumn("year_birth")
		ImColumn         = sqlite.StringColumn("im")
		NameColumn       = sqlite.StringColumn("name")
		CreatedTstColumn = sqlite.TimestampColumn("created_tst")
		ChangedTstColumn = sqlite.TimestampColumn("changed_tst")
		allColumns       = sqlite.ColumnList{UserColumn, CityColumn, RegionColumn, CountryColumn, AreaCodeColumn, ZipCodeColumn, YearBirthColumn, ImColumn, NameColumn, CreatedTstColumn, ChangedTstColumn}
		mutableColumns   = sqlite.ColumnList{CityColumn, RegionColumn, CountryColumn, AreaCodeColumn, ZipCodeColumn, YearBirthColumn, ImColumn, NameColumn, CreatedTstColumn, ChangedTstColumn}
	)

	return userTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		User:       UserColumn,
		City:       CityColumn,
		Region:     RegionColumn,
		Country:    CountryColumn,
		AreaCode:   AreaCodeColumn,
		ZipCode:    ZipCodeColumn,
		YearBirth:  YearBirthColumn,
		Im:         ImColumn,
		Name:       NameColumn,
		CreatedTst: CreatedTstColumn,
		ChangedTst: ChangedTstColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
